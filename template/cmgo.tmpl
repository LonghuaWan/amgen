// Code generated by cmgen.
// source:
// {{.ConfigName}}

package {{.PackageName}}

import (
    "errors"
    "github.com/globalsign/mgo"
    "github.com/globalsign/mgo/bson"
    "github.com/liamylian/jsontime"
    "time"
)

var (
    ErrorInvalidObjectId = errors.New("invalid objectId")
    json = jsontime.ConfigWithCustomTimeFormat
)

  {{range $_, $Model := .Models}}  {{$name := $Model.Name|ToLower}}{{$Name := $Model.Name}}  {{if .CollectionName}}
const (
    DbName{{$Name}} = "{{$.DbName}}"
    Collection{{$Model.Name}} = "{{$Model.CollectionName}}"
)
  {{if $Model.Types}}
const ({{range $Model.Types}}
    {{$Name}}Type{{.}} = "{{.}}"  {{end}}
)

var (
    {{$Name}}TypesMap = map[string]string{  {{range $Model.Types}}
        {{$Name}}Type{{.}}: "{{.}}",  {{end}}
    }
)

func Check{{$Name}}Type(typename string) bool {
    return {{$Name}}TypesMap[typename] != ""
}
{{end}}  {{if $Model.States}}
const ({{range $Model.States}}
    {{$Name}}State{{.}} = "{{.}}"  {{end}}
)

var (
    {{$Name}}StatesMap = map[string]string{  {{range $Model.States}}
        {{$Name}}State{{.}}: "{{.}}",  {{end}}
    }
)

func Check{{$Name}}States(status string) bool {
    return {{$Name}}StatesMap[status] != ""
}  {{end}}

func Get{{$Name}}SessionAndCollection() (*mgo.Session, *mgo.Collection) {
    //FIXME init MongoSession
	s := MongoSession.Copy()
	c := s.DB(DbName{{$Name}}).C(Collection{{$Model.Name}})

	return s, c
}

type {{$Name}} struct {
    ID bson.ObjectId `bson:"_id" json:"id"`{{range $Model.Fields}}
    {{.Name}} {{.Type}} `bson:"{{.Name|SnakeString}}" json:"{{.Name|SnakeString}},omitempty"{{if .Valid}} valid:"{{.Valid}}"{{end}}`{{end}}
    CreatedAt time.Time `bson:"created_at" json:"created_at" time_format:"2006-01-02 15:04:05"`
    UpdatedAt time.Time `bson:"updated_at" json:"updated_at" time_format:"2006-01-02 15:04:05"`
    Deleted int `bson:"deleted" json:"-"`
}

func New{{$Name}}() *{{$Name}}{
    return &{{$Name}}{}
}

func ({{$name}} *{{$Name}}) Insert() error {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()
    {{range $Model.Fields}}{{if .Unique }}
    if err := c.EnsureIndex(mgo.Index{
        Key: []string{"{{.Name|SnakeString}}"},
        Unique:     true,
        DropDups:   false,
        Background: true,
    }); err != nil {
        return err
    }{{end}}{{end}}

    {{$name}}.ID = bson.NewObjectId()
    {{$name}}.CreatedAt = time.Now()
    {{$name}}.UpdatedAt = time.Now()
    {{$name}}.Deleted = 0

    return c.Insert({{$name}})
}

func Update{{$Name}}ByID(id interface{}, {{$name}} *{{$Name}}) error {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    {{$name}}.UpdatedAt = time.Now()

    switch id := id.(type) {
    case bson.ObjectId:
        return c.UpdateId(id, bson.M{
            "$set": {{$name}},
        })
    case string:
        if !bson.IsObjectIdHex(id) {
            return ErrorInvalidObjectId
        }
        return c.UpdateId(bson.ObjectIdHex(id), bson.M{
            "$set": {{$name}},
        })
    }

    return errors.New("no bson.ObjectId")
}

func Update{{$Name}}ByIDAndEntityMap(id interface{}, updateMap map[string]interface{}) error {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    if updateMap == nil { return nil }
    updateMap["updated_at"] = time.Now()

    switch id := id.(type) {
    case bson.ObjectId:
        return c.UpdateId(id, bson.M{
            "$set": updateMap,
        })
    case string:
        if !bson.IsObjectIdHex(id) {
            return ErrorInvalidObjectId
        }
        return c.UpdateId(bson.ObjectIdHex(id), bson.M{
            "$set": updateMap,
        })
    }

    return errors.New("no bson.ObjectId")
}

// Update finds a single document matching the provided selector document
// and modifies it according to the update document.
// If the session is in safe mode (see SetSafe) a ErrNotFound error is
// returned if a document isn't found, or a value of type *LastError
// when some other error is detected.
//
// Relevant documentation:
//
//     http://www.mongodb.org/display/DOCS/Updating
//     http://www.mongodb.org/display/DOCS/Atomic+Operations
//
func Update{{$Name}}(selector interface{}, {{$name}} *{{$Name}}) error {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    {{$name}}.UpdatedAt = time.Now()

    return c.Update(selector, bson.M{
        "$set": {{$name}},
    })
}

// UpdateAll finds all documents matching the provided selector document
// and modifies them according to the update document.
// If the session is in safe mode (see SetSafe) details of the executed
// operation are returned in info or an error of type *LastError when
// some problem is detected. It is not an error for the update to not be
// applied on any documents because the selector doesn't match.
//
// Relevant documentation:
//
//     http://www.mongodb.org/display/DOCS/Updating
//     http://www.mongodb.org/display/DOCS/Atomic+Operations
//
func Update{{$Name}}All(selector interface{}, {{$name}} *{{$Name}}) (*mgo.ChangeInfo, error) {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    {{$name}}.UpdatedAt = time.Now()

    return c.UpdateAll(selector, bson.M{
        "$set": {{$name}},
    })
}

func Get{{$Name}}ByID(id interface{}) (*{{$Name}}, error) {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    {{$name}} := new({{$Name}})
    var err error
    switch id := id.(type) {
    case bson.ObjectId:
    	err = c.FindId(id).One({{$name}})
    case string:
        if !bson.IsObjectIdHex(id) {
            return nil, ErrorInvalidObjectId
        }
    	err = c.FindId(bson.ObjectIdHex(id)).One({{$name}})
    }
    if err == mgo.ErrNotFound {
        return nil, nil
    }
    return {{$name}}, nil
}

func GetOne{{$Name}}ByQuery(query map[string]interface{}) (*{{$Name}}, error) {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    if query == nil { query = map[string]interface{}{} }
    query["deleted"] = 0

    {{$name}} := new({{$Name}})

    err := c.Find(query).One({{$name}})
    if err == mgo.ErrNotFound {
        return nil, nil
    }
    return {{$name}}, nil
}

func ListAll{{$Name}}ByQuery(query map[string]interface{}) ([]*{{$Name}}, error) {
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    if query == nil { query = map[string]interface{}{} }
    query["deleted"] = 0

    {{$name}} := make([]*{{$Name}}, 0)

    return {{$name}}, c.Find(query).All(&{{$name}})
}

func Exist{{$Name}}ByID(id string) (bool, error) {
    if !bson.IsObjectIdHex(id) {
        return false, ErrorInvalidObjectId
    }

    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    {{$name}} := new({{$Name}})

    if err := c.FindId(bson.ObjectIdHex(id)).One({{$name}}); err != nil {
        if err == mgo.ErrNotFound {
            return false, nil
        }
        return false, err
    }

    return true, nil
}

func Delete{{$Name}}ByID(id string) error {
    if !bson.IsObjectIdHex(id) {
        return ErrorInvalidObjectId
    }
    s, c := Get{{$Name}}SessionAndCollection()
    defer s.Close()

    return c.UpdateId(bson.ObjectIdHex(id), bson.M{
        "$set": bson.M{"deleted": 1},
    })
}

{{else}}
type {{$Name}} struct { {{range $Model.Fields}}
    {{.Name}} {{.Type}} `bson:"{{.Name|SnakeString}},omitempty" json:"{{.Name|SnakeString}}"`{{end}}
}
{{end}}{{end}}

{{.Raw}}