// Code generated by go-bindata.
// sources:
// template/interface.tmpl
// template/mgo.tmpl
// DO NOT EDIT!

package mgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateInterfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xc1\x6a\xe3\x30\x10\x06\xe0\xb3\xf5\x14\xff\xe6\x64\x2f\x59\x79\xcf\x01\x1f\xb2\xf1\x06\x02\x25\x29\x34\xb7\x52\x8a\x6c\x8f\x14\x51\x59\x0a\x92\x4c\x09\xc1\xef\x5e\x64\xc7\x87\x1e\x7a\x1b\x5b\xff\x7c\x9a\x51\x59\x62\xe7\x3a\x82\x22\x4b\x5e\x44\xea\xd0\xdc\xd0\x2b\xb2\x9c\x95\x25\x82\x1b\x7c\x4b\x9b\x54\xde\xef\x7c\xe7\xac\xd4\xea\x28\x7a\x1a\xc7\xf4\xab\x3e\xe1\x78\x3a\xe3\x7f\x7d\x38\x33\x76\x15\xed\x87\x50\x94\x72\xcf\x73\xf9\x08\xb2\xb2\x54\x6e\xb3\xf8\x50\x4e\xf7\x57\xe7\x63\xc0\x9f\xcf\x14\xde\x6b\xb3\x24\xe3\xed\x4a\xa8\x45\x14\x8d\x08\x04\x6d\x23\x79\x29\x5a\xc2\x9d\x65\x07\xab\x63\xfd\x2f\x0f\x14\x82\x76\x16\xbf\x7b\xe5\xf8\xcb\xfc\x51\xb0\x91\x31\x39\xd8\x16\x3b\x67\x2d\xb5\x31\xbf\xb8\x10\x11\xa2\xd7\x56\xad\xd1\x35\x01\x9c\xf3\x85\x2d\x92\xf6\x60\xd6\x20\xef\xb1\xa9\x90\xb4\x5a\x0b\x33\x75\x16\x2c\xd3\x72\x3a\xf9\x55\xc1\x6a\x93\x1a\x32\xe3\x14\xdf\x8b\x28\x8c\xcc\x57\xaf\xfb\xed\x79\xfb\xf4\x86\x76\xbe\x0e\xf1\x42\xe8\x96\xa9\xa5\xd0\x86\xba\x55\xc1\xb2\x91\x4d\x90\x21\x9b\x77\x4d\x28\x50\x55\xf8\xfb\xa3\x75\x73\x83\x47\x3f\x84\x59\x0b\x64\x12\xbc\xa0\x8b\x26\x9d\xc7\x7b\xda\x28\xcd\xec\x85\x55\x34\x6d\x97\xcc\xae\xe1\xdf\x9f\x68\x6a\x19\xd9\x57\x00\x00\x00\xff\xff\x2a\x38\xde\x55\xdf\x01\x00\x00")

func templateInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInterfaceTmpl,
		"template/interface.tmpl",
	)
}

func templateInterfaceTmpl() (*asset, error) {
	bytes, err := templateInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/interface.tmpl", size: 479, mode: os.FileMode(420), modTime: time.Unix(1514187863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMgoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x38\x12\x7f\x36\x3f\xc5\x54\xc8\x15\x52\xe1\x53\xee\xd9\x07\x3f\xc4\x56\xdc\x33\xae\x75\xba\x8d\xbb\x2f\x69\xd0\xc8\xd2\xd8\xab\x46\x26\x5d\x92\x8a\x63\xa8\xfc\xee\x0b\x8a\x14\x25\xff\x51\x36\x5d\xa0\xbb\xd9\x17\x9b\xe2\xfc\xff\xcd\x0c\x87\x3c\x3f\x87\x31\x4b\x11\x56\x48\x91\xc7\x12\x53\x58\xec\x60\xbd\x42\x1a\x92\xf3\x73\x10\xac\xe0\x09\x0e\xf4\xb2\x2c\xc3\x31\xa3\xcb\x6c\x35\x8b\xd7\xa8\x94\xde\x8a\xae\x60\x76\x35\x87\xcb\x68\x3a\x27\x64\x13\x27\xf7\xf1\x0a\x35\xdf\x07\xb3\xb4\x8c\xe4\xfc\x7c\xc5\x06\xb5\x7e\x58\xb1\x6c\xbd\x61\x5c\x0a\xf8\xf7\x56\x33\x4f\xb2\xbc\xe6\x7c\x88\x39\xf8\x04\x00\x20\x5d\xc0\x9b\x68\x44\x02\x42\xe4\x6e\x83\x10\x8d\x40\x48\x5e\x24\x12\xca\x8a\x4c\xe3\x35\xea\x7f\x21\x79\x46\x57\xd5\x96\x40\x21\x32\x46\xe1\xcd\x7a\xc5\xc2\x6b\xf3\x41\x14\x21\xcb\x82\x26\x30\xc3\x6d\x34\xf2\x2b\x29\x23\x12\x68\xf5\x50\x92\x5e\xb6\xd4\xb6\x86\x43\xa0\x59\xae\xbf\x7b\xfa\x0b\x5e\x47\x23\xbd\xee\x69\x89\x41\x65\xad\x4f\x7a\x3d\x45\x7a\x8a\x90\x1e\x47\x59\x70\x0a\xe9\xc2\xa9\xf7\x8d\xbb\x01\x4c\x69\x26\xa3\x91\x7f\xca\x97\xc0\x5a\xab\x69\x2d\x93\x39\x5b\x85\x93\x58\xc6\xf9\xd2\xf7\x6e\x26\x17\xf3\x8b\x77\xb7\xb0\x63\x05\xac\x0b\x21\x21\x61\x94\x62\x22\x21\x8d\x65\xbc\x88\x05\x7e\xa6\x5e\xa0\xfd\xe8\xa5\x8b\xd0\xe9\xaa\xb5\x12\x52\x29\xfb\xc0\x33\x2a\xb5\xb2\xe9\x6c\x72\x75\x0b\xff\x7a\xa8\xb5\x68\x66\x51\x24\x09\x62\x8a\xe9\x67\xea\xf5\x21\x5d\x84\x3a\xbc\xc0\xc5\xf2\x16\xa5\xf5\xf8\x82\xa6\x63\x96\xe7\x46\xcc\x4f\xdc\xd2\x41\xe8\xb7\xe3\xeb\x9b\x68\x1b\x89\x2a\x60\x01\x83\x21\x34\x9e\x86\x63\xb6\xd9\xf9\x01\xe9\x25\x7a\x5f\x84\xd1\xc8\xaf\x1d\x08\xc7\x2d\x13\x41\x03\xb3\xe8\x43\x72\xda\xb9\xb7\x3c\x4b\x27\xd7\xfe\x86\xe3\x32\x7b\x7c\xd2\x29\xc3\xf9\xa4\x43\xcb\x63\x87\xf6\xf4\x07\x6d\x87\x96\xda\x21\x02\x50\x96\x3c\xa6\x2b\x84\xb3\x2f\x7d\x38\x7b\xcf\x52\xcc\xb5\x96\xb0\x5a\x09\xa5\x34\xc3\x59\x55\x74\x83\xa1\xa5\x87\xba\xd2\xbf\xcf\xd9\x3b\xb6\x45\xae\x54\x59\x9e\xcd\x8e\xe9\x46\x32\x5b\x42\x0b\x4d\xdb\x21\x09\xa3\x42\xda\x1e\x69\x88\x65\xb9\x2f\x3d\x04\xcf\x6d\x1d\xaa\xf0\x48\x40\xac\x7a\xcb\x31\xdf\x6d\x50\x34\xba\x5d\x50\xfb\x54\x6d\xd1\xba\xab\x94\xde\x2c\xcb\xb0\x36\x15\x2a\xe5\x69\x2a\xd2\x54\x29\xdd\xb4\x4d\x23\xef\x89\x88\xf7\xf1\x06\x86\xb0\x8e\x37\x37\x26\x5d\xb7\xe6\xaf\x6c\x41\x79\x6c\xf5\xb4\xe5\x41\x6d\xb8\xdf\x58\xd6\x9c\x95\xfd\xaa\x58\xc6\xbf\x61\x72\xbf\x27\xe8\xeb\xc3\x64\xef\x14\x58\x30\x96\xdb\x33\xc5\xa6\xf7\xc8\xe1\x9b\x5a\xe8\x16\x5e\x0d\xc1\xf3\x88\x22\xd6\xde\x3e\x8c\xd7\x32\x96\x4f\xe0\xe8\xc8\x7b\xe1\x54\xbb\x3f\x88\xa4\xd1\xf4\x6c\x28\xf7\x0c\x77\x18\xff\x51\x30\x8d\x4e\x5f\xc8\x58\x16\xe2\x39\x60\x3a\x9f\x6f\x8c\x8c\xc3\xb2\xb1\x67\x4e\x7a\x27\xb1\x7f\xe0\x4f\x23\x58\x08\x46\xc3\xab\xc5\x57\x4c\xe4\x34\x85\x3b\xfd\x39\xf0\xbe\x64\x69\x9f\xad\x33\x89\xeb\x8d\xdc\x79\xf0\xb5\xde\xf4\xee\x0e\x50\x98\x64\x98\xa7\x0d\xfc\x75\xa7\x94\x65\x55\x6a\x4a\xd5\x0a\x2d\xe9\xfb\x35\x8d\xef\xf1\xba\x0a\x4c\xa9\x63\x13\x27\xd9\x3c\xd3\xb4\xbf\xc6\x79\xa6\xab\xe3\x41\xff\x57\xac\x76\xc7\xb3\xa1\xde\xb5\x21\x1e\x73\xd4\x53\xf7\x42\x82\xcc\xd6\x18\xce\xb3\x35\xd6\xbe\x24\x86\xf4\x25\x96\xc7\x0e\x34\x34\xef\xae\xd2\xf3\x69\x93\x76\xe9\x29\x0c\xe9\xa4\x9e\x86\xe6\xdd\xb5\xc7\xa5\xcb\x83\x1f\xc0\x1b\xf7\xb1\x97\xdc\xd7\xcd\xb6\x6a\x46\xa1\x3d\xf2\x94\x6a\x89\xe9\xc1\x28\x90\x4b\x3f\x00\xe4\x9c\x71\x9b\x54\x7d\xb4\xeb\xa3\xaf\x6b\xe4\x74\x1e\x70\x81\xb9\x23\xe0\x12\x39\x88\x70\x9c\x33\x81\x7e\x60\x33\x7b\x32\xeb\x26\x31\x9f\x68\xf6\xad\x40\xb0\xc0\x67\x4b\xed\x8c\xb6\x9f\x84\x97\x54\x14\x1c\xa7\x34\xc5\x47\x5f\x0f\x8c\x6a\x55\xba\x8e\xf9\x3f\xee\x06\x70\x53\x77\x58\x47\xf2\x55\xdf\xf1\x1b\x43\x83\x6a\x2d\x79\x81\x0d\x25\xe2\x6c\x13\x15\x1b\xa1\x69\xcb\x38\x17\x2d\xd2\x28\x4e\xee\x57\x9c\x15\x34\x1d\xb4\x84\x54\xf0\xdf\xca\xcd\x57\xf5\x75\xa1\x66\xb7\x49\x40\xce\x0d\x9f\xad\x29\xd7\x4d\xb6\xd3\x4d\x2e\xc2\x69\x04\x43\xd3\x41\x33\xdc\xd6\x4d\xe4\x30\xab\xb9\x9a\x5a\x1c\x9a\x2a\x9a\xb1\xad\x1f\x84\x9f\xe6\x63\x3f\x20\xed\xd4\x27\xa1\x4d\xa8\x93\x6d\x2e\x10\xa6\x10\x5d\xee\x47\xbb\x69\xe4\x67\xa9\x3d\x24\xfa\x70\xba\x3e\x7e\x62\x59\x1c\xc4\xd8\xf4\xc9\x1f\xc6\x68\x58\xa7\xa9\xbf\x77\xf4\xfc\x0f\x1f\xfd\x2c\x0d\xfa\x06\xce\xf7\x4d\x46\xbc\x33\x81\xd2\x1b\x34\xb6\xea\x0c\x76\x43\x73\x8d\x3a\x12\xc6\x7d\x61\x17\x90\x51\x89\x7c\x19\x27\x58\xaa\x7f\x20\x56\x2e\x8e\x3f\x83\xce\x24\xa3\x69\x47\xd9\xe8\x6b\x9d\x23\xf5\x0d\x02\xc1\x5f\x01\x81\x56\x4c\x71\xeb\x37\xf0\x93\xfa\xf0\xa8\x02\x9c\x8a\x83\xb2\xb0\x4e\xf5\x9a\x01\x68\xa3\x85\x24\xd4\x01\x4e\x53\xcd\x15\x5e\x51\x6c\xf7\x8e\x99\xb5\x07\x93\xf3\x48\xf0\x54\x19\x1e\xa9\xea\x40\xf3\x97\x02\xf9\xce\xff\xa6\x7f\xdb\x35\xf6\xe2\x80\xed\x0a\xdf\xb8\xfe\x64\xb4\x17\x79\xfe\xac\x80\x6f\x6e\xff\xbe\x90\xd7\xf1\x3d\x1e\x38\xf0\x9f\x67\x46\x7e\x91\xe7\xfe\xeb\x13\xa1\x5f\x3e\x66\x42\x76\xf7\x8d\xbe\x94\xbd\x84\xc4\xb6\xc7\xed\x0f\xd4\x73\xc7\xf4\xb3\xda\x86\x43\xd0\xe3\xfa\x92\xf3\x19\x93\x13\x3d\x3b\x5b\x3c\x2d\x50\xcd\xa8\xd5\x3a\x1c\x55\x1d\x4e\x52\xcb\xe3\x06\xea\x5e\x56\xaa\x81\x5c\xc9\x77\xc1\xde\x5d\x6f\x2f\x35\x03\xa7\x5b\xea\xc5\x02\x1e\x61\x8e\x9d\xf7\x8a\x9f\x3f\x15\xdd\xa4\xfb\x88\x6b\xf6\xd0\x75\x2b\xa8\xda\xb2\x2c\x31\x17\xfa\xb5\xde\xf1\xa2\xe9\xba\xa5\xfe\xd4\xb7\x89\x7b\x74\xb8\xe7\xab\xbb\x2a\x96\x65\xf8\x31\xde\x2a\x45\x7e\x0f\x00\x00\xff\xff\x1a\x36\x8a\xf8\x0c\x14\x00\x00")

func templateMgoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMgoTmpl,
		"template/mgo.tmpl",
	)
}

func templateMgoTmpl() (*asset, error) {
	bytes, err := templateMgoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mgo.tmpl", size: 5132, mode: os.FileMode(420), modTime: time.Unix(1514188983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/interface.tmpl": templateInterfaceTmpl,
	"template/mgo.tmpl": templateMgoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"interface.tmpl": &bintree{templateInterfaceTmpl, map[string]*bintree{}},
		"mgo.tmpl": &bintree{templateMgoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

