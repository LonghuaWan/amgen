// Code generated by go-bindata.
// sources:
// template/interface.tmpl
// template/mgo.tmpl
// DO NOT EDIT!

package mgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateInterfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x41\x4b\xc3\x30\x14\x07\xf0\x73\xf3\x29\xfe\xee\xd4\xca\x4c\x3d\x0f\x7a\x98\xab\x83\x81\x6c\x82\xbb\x89\x48\xda\xbc\x66\xc1\x34\x19\x49\x86\x8c\xd1\xef\x2e\x69\xed\xc1\x83\xb7\x84\xbc\xff\x2f\xef\xbd\xb2\xc4\xc6\x49\x82\x22\x4b\x5e\x44\x92\x68\xae\xe8\x15\x59\xce\xca\x12\xf5\x01\xfb\xc3\x11\xcf\xf5\xee\xc8\xd8\x59\xb4\x5f\x42\x11\x6e\x37\xfe\x3a\x1d\xf7\xa2\xa7\x61\x60\xac\x2c\x95\x5b\xcd\x02\x94\xd3\xfd\xd9\xf9\x18\xf0\xf0\x9d\x8a\xb7\xda\xcc\x95\xf1\x7a\x26\xd4\x22\x8a\x46\x04\x82\xb6\x91\x7c\x27\x5a\xc2\x8d\x65\x3b\xab\x63\xfd\x94\x07\x0a\x41\x3b\x8b\xfb\x5e\x39\xfe\x36\x5d\x0a\x36\x30\xd6\x5d\x6c\x8b\x8d\xb3\x96\xda\x98\x9f\x5c\x88\x08\xd1\x6b\xab\x96\x90\x4d\x00\xe7\x7c\x66\x8b\xa4\xfd\x32\x4b\x90\xf7\x58\x55\x48\x5a\xad\x85\x19\x93\x05\xcb\x74\x37\xbe\xdc\x55\xb0\xda\xa4\x40\x66\x9c\xe2\x5b\x11\x85\xe9\xf2\xc5\xfb\x76\x7d\x5c\xbf\x7c\xa0\x9d\xbe\x43\x3c\x11\xe4\xdc\x75\x27\xb4\x21\xb9\x28\x58\x36\xb0\x11\x32\x64\x73\xd9\x84\x02\x55\x85\xc7\x7f\xad\xab\xbb\x78\xf4\x97\x30\x69\x81\x4c\x82\x67\x74\xd6\x3a\xe7\xf1\x99\x26\x4a\x3d\x7b\x61\x15\x8d\xd3\x25\x53\x36\xfc\xef\x8a\xc6\xc8\xc0\x7e\x02\x00\x00\xff\xff\x70\xc3\x5e\x48\xc1\x01\x00\x00")

func templateInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInterfaceTmpl,
		"template/interface.tmpl",
	)
}

func templateInterfaceTmpl() (*asset, error) {
	bytes, err := templateInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/interface.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1514277053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMgoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5d\x6f\xdb\x36\x17\xbe\x36\x7f\xc5\xa9\x90\xb7\x90\x0a\xbf\xca\x2e\x86\x5d\x78\xf0\x45\x6c\xc5\x9d\xb1\xd6\xe9\x9a\x74\x37\x69\xd0\xc8\xd2\xb1\xab\x46\x26\x5d\x92\x8a\x63\xa8\xfc\xef\x03\x45\x8a\x92\x1d\x2b\x48\x8a\x75\xcb\x6e\x6c\x89\xe7\xfb\x39\x1f\x3c\x3a\x3e\x86\x31\x4b\x11\x96\x48\x91\xc7\x12\x53\x98\x6f\x61\xb5\x44\x1a\x92\xe3\x63\x10\xac\xe0\x09\x0e\xf4\x63\x59\x86\x63\x46\x17\xd9\x72\x16\xaf\x50\x29\x7d\x14\x9d\xc1\xec\xec\x02\x4e\xa3\xe9\x05\x21\xeb\x38\xb9\x89\x97\xa8\xf9\xde\x99\x47\xcb\x48\x8e\x8f\x97\x6c\x50\xeb\x87\x25\xcb\x56\x6b\xc6\xa5\x80\xff\x6f\x34\xf3\x24\xcb\x6b\xce\xdb\x98\x83\x4f\x00\x00\xd2\x39\xbc\x8a\x46\x24\x20\x44\x6e\xd7\x08\xd1\x08\x84\xe4\x45\x22\xa1\xac\xc8\x34\x5e\xa1\xfe\x17\x92\x67\x74\x59\x1d\x09\x14\x22\x63\x14\x5e\xad\x96\x2c\x3c\x37\x2f\x44\x11\xb2\x28\x68\x02\x33\xdc\x44\x23\xbf\x92\x32\x22\x81\x56\x0f\x25\xe9\x65\x0b\x6d\x6b\x38\x04\x9a\xe5\xfa\xbd\xa7\xdf\xe0\x65\x34\xd2\xcf\x3d\x2d\x31\xa8\xac\xf5\x49\xaf\xa7\x48\x4f\x11\xd2\xe3\x28\x0b\x4e\x21\x9d\x3b\xf5\xbe\x71\x37\x80\x29\xcd\x64\x34\xf2\x0f\xf9\x12\x58\x6b\x35\xad\x65\x32\x67\xcb\x70\x12\xcb\x38\x5f\xf8\xde\xe5\xe4\xe4\xe2\xe4\xcd\x15\x6c\x59\x01\xab\x42\x48\x48\x18\xa5\x98\x48\x48\x63\x19\xcf\x63\x81\x1f\xa9\x17\x68\x3f\x7a\xe9\x3c\x74\xba\x6a\xad\x84\x54\xca\xde\xf1\x8c\x4a\xad\x6c\x3a\x9b\x9c\x5d\xc1\xff\x6e\x6b\x2d\x9a\x59\x14\x49\x82\x98\x62\xfa\x91\x7a\x7d\x48\xe7\xa1\x0e\x2f\x70\xb1\xbc\x46\x69\x3d\x3e\xa1\xe9\x98\xe5\xb9\x11\xf3\x13\xf7\xe8\x20\xf4\xdb\xf1\xf5\x4d\xb4\x8d\x44\x15\xb0\x80\xc1\x10\x1a\x4f\xc3\x31\x5b\x6f\xfd\x80\xf4\x12\x7d\x2e\xc2\x68\xe4\xd7\x0e\x84\xe3\x96\x89\xa0\x81\x59\xf4\x21\x39\xec\xdc\x6b\x9e\xa5\x93\x73\x7f\xcd\x71\x91\xdd\x3d\xe8\x94\xe1\x7c\xd0\xa1\xc5\x7d\x87\x76\xf4\x07\x6d\x87\x16\xda\x21\x02\x50\x96\x3c\xa6\x4b\x84\xa3\x4f\x7d\x38\x7a\xcb\x52\xcc\xb5\x96\xb0\x7a\x12\x4a\x69\x86\xa3\xaa\xe8\x06\x43\x4b\x0f\x75\xa5\x7f\xbb\x60\x6f\xd8\x06\xb9\x52\x65\x79\x34\xbb\x4f\x37\x92\xd9\x02\x5a\x68\xda\x0e\x49\x18\x15\xd2\xf6\x48\x43\x2c\xcb\x5d\xe9\x21\x78\xee\x68\x5f\x85\x47\x02\x62\xd5\x5b\x8e\x8b\xed\x1a\x45\xa3\xdb\x05\xb5\x4b\xd5\x16\xad\xbb\x4a\xe9\xc3\xb2\x0c\x6b\x53\xa1\x52\x9e\xa6\x22\x4d\x95\xd2\x4d\xdb\x34\xf2\x8e\x88\x78\x1b\xaf\x61\x08\xab\x78\x7d\x69\xd2\x75\x65\xfe\xca\x16\x94\xf7\xad\x1e\xb6\x3c\xa8\x0d\xf7\x1b\xcb\x9a\xb3\xb2\x5f\x15\xcb\xf8\x33\x26\x37\x3b\x82\xbe\x1e\x26\x3b\x53\x60\xce\x58\x6e\x67\x8a\x4d\xef\x3d\x87\x2f\x6b\xa1\x2b\x78\x31\x04\xcf\x23\x8a\x58\x7b\xbb\x30\x9e\xcb\x58\x3e\x80\xa3\x23\xef\x84\x53\x9d\x3e\x11\x49\xa3\xe9\xd1\x50\xee\x18\xee\x30\xfe\x54\x30\x8d\x4e\x5f\xc8\x58\x16\xe2\x31\x60\x3a\x9f\x2f\x8d\x8c\xc3\xb2\xb1\x67\x26\xbd\x93\xd8\x1d\xf8\xd3\x08\xe6\x82\xd1\xf0\x6c\xfe\x05\x13\x39\x4d\xe1\x5a\xbf\x0e\xbc\x4f\x59\xea\xc1\x17\xf7\x78\xbd\x17\xfb\x24\xc3\x3c\x6d\x40\xaf\xfb\xa3\x2c\xab\x02\x53\xaa\x56\x63\x49\xdf\xce\x69\x7c\x83\xe7\x55\x38\x3a\x11\x5f\xba\x89\x7d\xb6\xca\x24\xae\xd6\x72\xeb\x99\x56\xfd\x33\xce\x33\x5d\x13\xb7\xfa\xbf\x12\xb2\x27\x9e\x0d\xf0\xba\x0d\xec\x98\xa3\xbe\x6b\x4f\x24\x64\x54\xfe\xf2\x73\xed\x47\x62\x8e\x3f\xc5\xb2\x36\xde\x3a\xb9\xae\x24\x3f\xac\xd3\x43\x92\x85\x39\x6e\x49\xb6\x4e\xae\xdb\x17\xa1\x43\xd8\x0f\xe0\x95\x7b\xd9\x49\xdb\xcb\xe6\x58\x35\x97\x9c\x1d\x66\x4a\xb5\xc4\xf4\x95\x27\x90\x4b\x3f\x00\xe4\x9c\x71\x9b\x2e\x3d\xb4\xf5\x50\xeb\xba\x4c\x3a\x47\x57\x60\x6e\x7f\x5c\x20\x07\x11\x8e\x73\x26\xd0\x0f\x6c\xf6\x0e\x66\xd6\x80\xff\x81\x66\x5f\x0b\x04\x0b\x6e\xb6\xd0\xce\x68\xfb\x49\x78\x4a\x45\xc1\x71\x4a\x53\xbc\xf3\xf5\x55\x50\x3d\x95\xae\x17\x7e\xc7\xed\x00\x2e\xeb\xde\xe9\xa8\x03\xd5\x77\xfc\xc6\xd0\xa0\x7a\x96\xbc\xc0\x86\x12\x71\xb6\x8e\x8a\xb5\xd0\xb4\x45\x9c\x8b\x16\x69\x14\x27\x37\x4b\xce\x0a\x9a\x0e\x5a\x42\x2a\xf8\xb5\x72\xf3\x45\xbd\x08\xd4\xec\x36\x09\xc8\xb9\xe1\xb3\x75\xe3\xfa\xc4\xf6\xb0\xc9\x45\x38\x8d\x60\x68\x7a\x63\x86\x9b\xba\x3d\x1c\x66\x35\x57\x53\x6f\x43\x90\xd9\x0a\xc3\x19\xdb\xf8\x41\xf8\xe1\x62\xac\x7f\x69\x76\xe7\x07\xa4\x5d\x01\x49\x68\xf3\xea\x54\x34\x1b\x82\xa9\x40\x57\x02\xa3\xed\x34\xf2\xb3\xd4\x4e\x81\x3e\x1c\x2e\x93\x1f\x58\x1d\x7b\xa1\x36\x0d\xf2\xd8\x50\x8d\xc4\x34\xf5\x77\x46\xcc\x6f\x78\xe7\x67\x69\xd0\x37\xe0\xbe\x6d\xf2\xe3\x1d\x09\x94\xde\xa0\x31\x59\xe7\xb3\x0b\x21\x5f\xa0\x8e\x87\x71\xdd\xb2\xc8\x17\x71\x82\xa5\xfa\xef\x02\xe5\xc2\xf9\x1b\xa0\x39\xc9\xf3\x27\xa1\x63\xb6\xbb\xf1\x67\x3d\x0a\xa6\x74\xc1\xfa\x06\xaf\xe0\x59\x03\xd6\x0e\xf2\x7b\x30\x9b\x64\x34\xed\x68\x37\x8d\x88\x23\xfd\x93\x60\x68\xc5\x14\x37\x7e\x93\x1b\x52\xcf\xde\x2a\xc0\xa9\xd8\xeb\x23\xeb\x54\xaf\xd9\x0c\x6c\xb4\x90\x84\x3a\xc0\x69\xaa\xb9\xc2\x33\x8a\xed\x99\x63\x96\x90\xbd\x95\xe2\x9e\xe0\xa1\xbe\xbd\xa7\xaa\x03\xcd\x3f\x0a\xe4\x5b\xff\xab\xfe\x6d\x17\xe0\xb3\x03\xb6\x2b\x7c\xe3\xfa\x83\xd1\x9e\xe4\xf9\xa3\x02\xbe\xbc\xfa\xf7\x42\x5e\xc5\x37\xb8\xe7\xc0\x4f\x8f\x8c\x5c\xb7\xd7\xcb\x03\xa1\x9f\xde\x65\x42\x76\xf7\x8d\xde\x56\x9f\x43\x62\xdb\xdb\xca\x13\xea\xb9\x63\x79\xb0\xda\x86\x43\xd0\x83\xf2\x94\xf3\x19\x93\x13\xbd\x7a\xb4\x78\x5a\xa0\x9a\x4d\x45\xeb\x70\x54\xb5\xbf\x88\x58\x1e\xb7\x8f\xec\x64\xa5\xda\x67\x2a\xf9\x2e\xd8\xbb\xeb\xed\xb9\x66\xe0\x70\x4b\x3d\x5b\xc0\x23\xcc\xb1\x73\x1f\xfb\xf1\x0b\x85\xbb\xec\xde\xe3\x8a\xdd\x76\xad\x51\x55\x5b\x96\x25\xe6\x02\x95\xea\xfa\xd4\xeb\x5a\xf2\xbf\xeb\xf3\xad\xf5\x85\xf6\xd0\x87\x9c\xe7\xbe\xcb\xdc\x77\xbd\xdb\xb4\xcb\x32\x7c\x1f\x6f\x94\x22\x7f\x05\x00\x00\xff\xff\x22\x33\x7b\xd0\x25\x15\x00\x00")

func templateMgoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMgoTmpl,
		"template/mgo.tmpl",
	)
}

func templateMgoTmpl() (*asset, error) {
	bytes, err := templateMgoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mgo.tmpl", size: 5413, mode: os.FileMode(420), modTime: time.Unix(1517379278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/interface.tmpl": templateInterfaceTmpl,
	"template/mgo.tmpl": templateMgoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"interface.tmpl": &bintree{templateInterfaceTmpl, map[string]*bintree{}},
		"mgo.tmpl": &bintree{templateMgoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

