// Code generated by go-bindata.
// sources:
// template/interface.tmpl
// template/mgo.tmpl
// DO NOT EDIT!

package cmgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateInterfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x41\x4b\xc3\x30\x14\x07\xf0\x73\xf3\x29\xfe\xee\xd4\xca\x4c\x3d\x0f\x7a\x98\xab\x83\x81\x6c\x82\xbb\x89\x48\xda\xbc\x66\xc1\x34\x19\x49\x86\x8c\xd1\xef\x2e\x69\xed\xc1\x83\xb7\x84\xbc\xff\x2f\xef\xbd\xb2\xc4\xc6\x49\x82\x22\x4b\x5e\x44\x92\x68\xae\xe8\x15\x59\xce\xca\x12\xf5\x01\xfb\xc3\x11\xcf\xf5\xee\xc8\xd8\x59\xb4\x5f\x42\x11\x6e\x37\xfe\x3a\x1d\xf7\xa2\xa7\x61\x60\xac\x2c\x95\x5b\xcd\x02\x94\xd3\xfd\xd9\xf9\x18\xf0\xf0\x9d\x8a\xb7\xda\xcc\x95\xf1\x7a\x26\xd4\x22\x8a\x46\x04\x82\xb6\x91\x7c\x27\x5a\xc2\x8d\x65\x3b\xab\x63\xfd\x94\x07\x0a\x41\x3b\x8b\xfb\x5e\x39\xfe\x36\x5d\x0a\x36\x30\xd6\x5d\x6c\x8b\x8d\xb3\x96\xda\x98\x9f\x5c\x88\x08\xd1\x6b\xab\x96\x90\x4d\x00\xe7\x7c\x66\x8b\xa4\xfd\x32\x4b\x90\xf7\x58\x55\x48\x5a\xad\x85\x19\x93\x05\xcb\x74\x37\xbe\xdc\x55\xb0\xda\xa4\x40\x66\x9c\xe2\x5b\x11\x85\xe9\xf2\xc5\xfb\x76\x7d\x5c\xbf\x7c\xa0\x9d\xbe\x43\x3c\x11\xe4\xdc\x75\x27\xb4\x21\xb9\x28\x58\x36\xb0\x11\x32\x64\x73\xd9\x84\x02\x55\x85\xc7\x7f\xad\xab\xbb\x78\xf4\x97\x30\x69\x81\x4c\x82\x67\x74\xd6\x3a\xe7\xf1\x99\x26\x4a\x3d\x7b\x61\x15\x8d\xd3\x25\x53\x36\xfc\xef\x8a\xc6\xc8\xc0\x7e\x02\x00\x00\xff\xff\x70\xc3\x5e\x48\xc1\x01\x00\x00")

func templateInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInterfaceTmpl,
		"template/interface.tmpl",
	)
}

func templateInterfaceTmpl() (*asset, error) {
	bytes, err := templateInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/interface.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1514277053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMgoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x53\xe3\xba\x15\x7f\x8e\xff\x8a\x73\x3d\x74\xc7\xa6\xa9\xb9\xcf\xe9\xe4\x81\x24\xe4\x36\x53\x36\x6c\x2f\x6c\x5f\xb8\xcc\xe2\xd8\x27\x41\x8b\x2d\xe5\x4a\x0a\x21\xe3\xf5\xff\xde\xd1\x87\x65\x3b\x89\x19\xd8\x9d\x6d\x29\x0f\xc4\x96\xce\xe7\xef\x7c\xe8\x58\x67\x67\x30\x66\x29\xc2\x0a\x29\xf2\x58\x62\x0a\x8b\x1d\xe4\x2b\xa4\x91\x77\x76\x06\x82\x6d\x78\x82\x03\xf5\x58\x14\xd1\x98\xd1\x25\x59\xcd\xe3\x1c\xcb\x52\x2d\x4d\xae\x60\x7e\x75\x03\x17\x93\xd9\x8d\xe7\xad\xe3\xe4\x31\x5e\xa1\xa2\xfb\x64\x1e\x2d\xa1\x77\x76\xb6\x62\x83\x4a\x3e\xac\x18\xc9\xd7\x8c\x4b\x01\x7f\xdb\x2a\xe2\x29\xc9\x2a\xca\xa7\x98\x43\xe0\x01\x00\xa4\x0b\x38\x9d\x8c\xbc\xd0\xf3\xe4\x6e\x8d\x30\x19\x81\x90\x7c\x93\x48\x28\xf4\x36\x8d\x73\x54\xbf\x42\x72\x42\x57\x7a\x49\xa0\x10\x84\x51\x38\xcd\x57\x2c\xba\x36\x2f\x5e\xe9\x79\xcb\x0d\x4d\x60\x8e\xdb\xc9\x28\xd0\x5c\x86\x25\x54\xe2\xa1\xf0\x7a\x64\xa9\x74\x0d\x87\x40\x49\xa6\xde\x7b\xea\x0d\x3e\x4c\x46\xea\xb9\xa7\x38\x06\x5a\x5b\xdf\xeb\xf5\x4a\xaf\x57\x7a\x5e\x8f\xa3\xdc\x70\x0a\xe9\xc2\x89\x0f\x8c\xb9\x21\xcc\x28\x91\x93\x51\x70\xcc\x96\xd0\x6a\xab\xf6\x1a\x2a\x33\xb6\x8a\xa6\xb1\x8c\xb3\x65\xe0\xdf\x4e\xcf\x6f\xce\x2f\xef\x60\xc7\x36\x90\x6f\x84\x84\x84\x51\x8a\x89\x84\x34\x96\xf1\x22\x16\xf8\x07\xf5\x43\x65\x47\x2f\x5d\x44\x4e\x56\x25\xd5\xf3\xb4\xb0\x4f\x9c\x50\xa9\x84\xcd\xe6\xd3\xab\x3b\xf8\xcb\x53\x25\x45\x11\x8b\x4d\x92\x20\xa6\x98\xfe\x41\xfd\x3e\xa4\x8b\x48\xb9\x17\x3a\x5f\x7e\x43\x69\x2d\x3e\xa7\xe9\x98\x65\x99\x61\x0b\x12\xf7\xe8\x20\x0c\x9a\xfe\xf5\x8d\xb7\x35\x87\x76\x58\xc0\x60\x08\xb5\xa5\xd1\x98\xad\x77\x41\xe8\xf5\x12\xb5\x2e\xa2\xc9\x28\xa8\x0c\x88\xc6\x0d\x15\x61\x0d\xb3\xe8\x43\x72\xdc\xb8\xdf\x38\x49\xa7\xd7\xc1\x9a\xe3\x92\x3c\xbf\x68\x94\xa1\x7c\xd1\xa0\xe5\xa1\x41\x2d\xf9\x61\xd3\xa0\xa5\x32\xc8\x03\x28\x0a\x1e\xd3\x15\xc2\xc9\x97\x3e\x9c\x7c\x64\x29\x66\x4a\x4a\xa4\x9f\x44\x59\x2a\x82\x13\x9d\x74\x83\xa1\xdd\x8f\x54\xa6\x7f\xbb\x61\x97\x6c\x8b\xbc\x2c\x8b\xe2\x64\x7e\xb8\x6f\x38\xc9\x12\x1a\x68\xda\x0a\x49\x18\x15\xd2\xd6\x48\xbd\x59\x14\x6d\xee\x21\xf8\x6e\x69\x5f\x84\xef\x85\x9e\x15\x6f\x29\x6e\x76\x6b\x14\xb5\x6c\xe7\x54\x7b\x57\x69\xb4\xe6\x96\xa5\x5a\x2c\x8a\xa8\x52\x15\x95\xa5\xaf\x76\x91\xa6\x65\xa9\x8a\xb6\x2e\xe4\x16\x8b\xf8\x18\xaf\x61\x08\x79\xbc\xbe\x35\xe1\xba\x33\x3f\x45\x03\xca\x43\xad\xc7\x35\x0f\x2a\xc5\xfd\x5a\xb3\xa2\xd4\xfa\x75\xb2\x8c\x1f\x30\x79\x6c\x31\x06\xaa\x99\xb4\xba\xc0\x82\xb1\xcc\xf6\x14\x1b\xde\x03\x83\x6f\x2b\xa6\x3b\xf8\x65\x08\xbe\xef\x95\x9e\xd5\xd7\x86\xf1\x5a\xc6\xf2\x05\x1c\xdd\x76\xcb\x1d\xbd\xfa\x46\x24\x8d\xa4\x57\x43\xd9\x52\xdc\xa1\xfc\xad\x60\x1a\x99\x81\x90\xb1\xdc\x88\xd7\x80\xe9\x6c\xbe\x35\x3c\x0e\xcb\x5a\x9f\xe9\xf4\x8e\xa3\xdd\xf0\x67\x13\x58\x08\x46\xa3\xab\xc5\x57\x4c\xe4\x2c\x85\x7b\xf5\x3a\xf0\xbf\x90\xd4\x87\xaf\xee\xf1\x7e\xcf\xf7\x29\xc1\x2c\xad\x41\xaf\xea\xa3\x28\x74\x82\x95\x65\x25\xc6\x6e\x7d\xbb\xa6\xf1\x23\x5e\x6b\x77\x54\x20\xbe\x76\x6f\xf6\x59\x4e\x24\xe6\x6b\xb9\xf3\x4d\xa9\xfe\x3b\xce\x88\xca\x89\x27\xf5\xab\x99\xec\x8a\x6f\x1d\xbc\x6f\x02\x3b\xe6\xa8\xce\xda\x73\x09\x92\xe4\x18\xdd\x90\x1c\x2b\x5b\x12\xb3\xf5\x25\x96\x95\x01\x8d\x95\x7b\xcd\xfd\x79\x9d\x76\x71\x6f\xcc\x56\x83\xbb\xb1\x72\xdf\x3c\x10\x1d\xd2\x41\x08\xa7\xee\xa5\x15\xbe\x0f\xf5\x72\x59\x1f\x76\xb6\xa9\x95\x65\x83\x4d\x1d\x7d\x02\xb9\x0c\x42\x40\xce\x19\xb7\x61\x53\xcd\x5b\x35\xb7\xae\x43\xa5\xb3\x85\x85\x66\x0a\xc0\x25\x72\x10\xd1\x38\x63\x02\x83\xd0\x46\xf1\x68\x84\x4d\x10\x3e\x53\xf2\xe7\x06\xc1\x82\x4c\x96\xca\x18\xa5\x3f\x89\x2e\xa8\xd8\x70\x9c\xd1\x14\x9f\x03\x75\x24\xe8\xa7\xc2\xd5\xc4\x3f\x71\x37\x80\xdb\xaa\x86\x3a\xf2\xa1\xec\x3b\x7a\xa3\x68\xa0\x9f\x25\xdf\x60\xbd\x33\xe1\x6c\x3d\xd9\xac\x85\xda\x5b\xc6\x99\x68\x6c\x8d\xe2\xe4\x71\xc5\xd9\x86\xa6\x83\x06\x53\x19\xfe\x5d\x9b\xf9\x4b\x35\x10\x54\xe4\x36\x08\xc8\xb9\xa1\xb3\xf9\xe3\xea\xc5\xd6\xb2\x89\x45\x34\x9b\xc0\xd0\xd4\xc8\x1c\xb7\x55\x99\x38\xcc\x2a\xaa\x3a\xef\x86\x26\x77\xe6\x6c\x1b\x84\xd1\xe7\x9b\x71\x10\x7a\xcd\xd0\x27\x91\x0d\xa8\xe3\xad\x47\x04\x93\x7e\x2e\xf6\xa3\xdd\x6c\x12\x90\x14\x08\x95\xc8\x97\x71\x82\x45\xd9\x87\xe3\x49\xf2\x13\x73\x63\xcf\xd1\xba\x44\xba\x1c\x15\x5b\x22\x93\x07\x20\xa9\x32\x82\xa4\x91\x3e\x1c\x42\x6b\x5c\x12\x0b\x6c\x77\x9c\xc1\x7e\x5c\x12\xab\x63\x96\x06\x24\xed\x1b\xe2\x8f\x75\xf4\xd4\x9f\x7f\x22\x50\xfa\x83\xda\xac\x3a\x17\xac\x17\x5a\x8f\xc9\xba\x97\x14\xb4\x2c\xf9\x07\x3e\x07\x24\x0d\xbf\x57\x65\xd9\x8a\xb3\x8e\x88\x50\x39\x13\xf8\x94\xb5\x5d\xf6\x3b\x43\x1e\x08\x54\xb1\x61\xfc\xff\x2d\xe8\x7b\xd0\x3a\x3f\x0e\xc1\xec\x00\xb2\xbb\x0c\xce\xb3\xec\x4d\xb0\x98\x41\x75\xfc\xa0\xba\xd9\x8c\x2e\x59\xdf\x00\x15\xbe\x4f\xa4\x9a\xde\x7d\x0f\x58\x53\x42\xd3\x97\x3a\x86\xc2\xc3\xed\xff\x37\xa1\x50\x82\x29\x6e\x83\x3a\x32\x3f\xd0\x1e\x7a\xf5\xdc\x63\x71\x80\x24\x52\xae\xeb\x26\x11\x46\x57\x14\x9b\x0d\xf5\x68\x07\x78\x49\xc6\xb1\x3e\x70\x54\x6a\xbb\xc8\x29\xc9\xfa\xaf\xad\xf4\xbd\x40\xfd\x6b\x83\x7c\x17\xfc\xa9\xfe\xbf\xeb\x70\x75\x81\x66\x4c\x3f\xc0\xa8\xe9\xed\x79\x96\xbd\xca\xe1\xdb\xbb\xff\x9d\xcb\x79\xfc\x88\x7b\x06\xfc\xfa\x4a\xcf\x55\xe5\x7e\xe8\x70\xbd\xe1\xf7\x94\xf1\xdc\xf8\xbe\xd4\x23\x15\x9c\x0a\xc9\x78\xbc\xc2\x48\xaf\x76\xfb\xdf\xfb\x01\xe7\x7b\x07\x9e\xf7\x0c\xf2\x7a\x66\xd3\x5e\x18\x6b\xa2\x6b\x8c\x79\xf2\xa0\x08\xc8\x12\x32\xa4\x6e\x9d\x71\x19\xaa\xd9\xe9\x57\x7d\x95\xa2\xb9\xf5\x62\x93\x20\x8a\xa2\xd0\xdc\xdd\xbc\x0a\xd5\x23\x15\x68\xe5\x3e\x92\xb5\x93\xfb\x48\xd6\xf0\x57\xa8\x5e\x3f\xc5\x2b\x84\x53\xb0\x6f\x97\x24\x97\x61\x18\x79\xbd\xde\x25\xc9\x89\xb3\x45\x2f\xab\xd5\xae\x98\x5c\x3c\x13\x21\x0f\xda\xa4\xbb\xda\x50\x1f\x58\xef\xa1\xd8\x9a\x83\xf5\x1b\x3a\x53\xc7\x9c\x6b\xa5\x0d\x87\xa0\x0e\xc4\x0b\xce\xe7\x4c\x4e\xd5\x94\x0c\xed\xd1\xc6\x46\xc5\x0c\xd5\x4a\x46\x3d\xd9\xec\x8f\x4e\x96\xc6\x8d\xce\xad\x4a\xd1\xa3\xb7\xe6\xef\x82\xbd\xbb\x07\xbc\xd7\x08\x1c\x6f\x73\xef\x16\xf0\x09\x66\x78\xe4\x0b\xa2\x4a\xf4\x9f\x3d\x31\xba\xd9\xe6\x77\xcc\xd9\x53\xd7\x80\xad\xcb\xb2\x28\x30\x13\x58\x96\x5d\xb7\x13\x5d\xdf\xa3\xdf\x75\xe3\xd0\xb8\x54\x78\xe9\xee\xc1\x77\x57\x09\xee\x2a\xca\x7d\x14\x16\x45\xf4\x7b\xbc\x2d\x4b\xef\x3f\x01\x00\x00\xff\xff\x14\x65\x2e\xd6\xd8\x17\x00\x00")

func templateMgoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMgoTmpl,
		"template/mgo.tmpl",
	)
}

func templateMgoTmpl() (*asset, error) {
	bytes, err := templateMgoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mgo.tmpl", size: 6104, mode: os.FileMode(420), modTime: time.Unix(1520081392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/interface.tmpl": templateInterfaceTmpl,
	"template/mgo.tmpl": templateMgoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"interface.tmpl": &bintree{templateInterfaceTmpl, map[string]*bintree{}},
		"mgo.tmpl": &bintree{templateMgoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

