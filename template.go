// Code generated by go-bindata.
// sources:
// ../template/interface.tmpl
// ../template/mgo.tmpl
// DO NOT EDIT!

package mgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplateInterfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xbf\x6a\xeb\x30\x18\x05\xf0\xd9\x7a\x8a\x73\x33\xd9\x97\x20\x77\x0e\x78\x48\xe3\x06\x02\x25\x19\x9a\xad\x94\x22\x5b\x9f\x14\x51\x59\x0a\x92\x3c\x84\xe0\x77\x2f\x72\xea\xa1\x43\x37\xfd\xe1\xfc\xf4\x1d\xd5\x35\x76\x5e\x12\x34\x39\x0a\x22\x91\x44\x77\xc3\xa0\xc9\x71\x56\xd7\x88\x7e\x0c\x3d\x6d\xf2\xf2\x7e\xe7\x3b\xef\x94\xd1\x47\x31\xd0\x34\xe5\xa3\xf6\x84\xe3\xe9\x8c\x97\xf6\x70\x66\xec\x2a\xfa\x2f\xa1\x09\x83\x97\x64\x19\x4b\xb7\x2b\xa1\x15\x49\x74\x22\x12\x8c\x4b\x14\x94\xe8\x09\x77\x56\x1c\x9c\x49\xed\x73\x19\x29\x46\xe3\x1d\xfe\x0f\xda\xf3\xb7\xc7\xa6\x62\x13\x63\x6a\x74\x3d\x76\xde\x39\xea\x53\x79\xf1\x31\x21\xa6\x60\x9c\x5e\x43\x76\x11\x9c\xf3\x85\xad\xb2\xf6\xc3\xac\x41\x21\x60\xd3\x20\x6b\xad\x11\x76\x4e\x56\xac\x30\x6a\xbe\xf9\xd7\xc0\x19\x9b\x03\x85\xf5\x9a\xef\x45\x12\x56\x95\xab\xf7\xfd\xf6\xbc\x7d\xfd\x40\xff\x78\x0e\xe9\x42\x90\xcb\xd4\x4a\x18\x4b\x72\x55\xb1\x62\x62\x33\x64\xc9\x95\xb2\x8b\x15\x9a\x06\x4f\x7f\x5a\x37\x3f\x06\x0c\x63\x7c\x68\x91\x6c\x86\x17\x74\xd1\x94\x0f\xf8\xcc\x8d\xf2\xcc\x41\x38\x4d\x73\xbb\x6c\xca\x8e\xff\xfe\xa2\x39\x32\xb1\xef\x00\x00\x00\xff\xff\xce\xe9\xef\x89\xab\x01\x00\x00")

func TemplateInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplateInterfaceTmpl,
		"../template/interface.tmpl",
	)
}

func TemplateInterfaceTmpl() (*asset, error) {
	bytes, err := TemplateInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../template/interface.tmpl", size: 427, mode: os.FileMode(420), modTime: time.Unix(1513445383, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateMgoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5b\x6f\xdb\x36\x14\x7e\x36\x7f\xc5\xa9\x90\x15\x52\x61\x28\x7b\xf6\xe0\x87\xd8\x8a\x3b\x63\xad\xd3\x35\xee\x5e\xd2\xa0\x91\xa5\x63\x4f\x8d\x4c\xba\x24\x95\xc4\x50\xf9\xdf\x07\x8a\x14\x25\x5f\x94\xa5\x03\xb2\x65\x2f\x09\xc5\x73\xff\xce\x8d\x3e\x3d\x85\x31\x4b\x11\x56\x48\x91\xc7\x12\x53\x58\x6c\x61\xbd\x42\x1a\x92\xd3\x53\x10\xac\xe0\x09\x0e\xf4\xb1\x2c\xc3\x31\xa3\xcb\x6c\x35\x8b\xd7\xa8\x94\xbe\x8a\x2e\x60\x76\x31\x87\xf3\x68\x3a\x27\x64\x13\x27\xb7\xf1\x0a\x35\xdf\x07\x73\xb4\x8c\xe4\x2e\xe6\xe0\x13\x00\x80\x74\x01\x6f\xa2\x11\x09\x08\x91\xdb\x0d\x42\x34\x02\x21\x79\x91\x48\x28\x2b\x32\x8d\xd7\xa8\xff\x0b\xc9\x33\xba\xaa\xae\x04\x0a\x91\x31\x0a\x6f\xd6\x2b\x16\x5e\x9a\x0f\xa2\x08\x59\x16\x34\x81\x19\xde\x47\x23\xbf\x92\x32\x22\x81\x56\x0f\x25\xe9\x65\x4b\x6d\x6b\x38\x04\x9a\xe5\xfa\xbb\xa7\xbf\xe0\x75\x34\xd2\xe7\x9e\x96\x18\x54\xd6\xfa\xa4\xd7\x53\xa4\xa7\x08\xe9\x71\x94\x05\xa7\x90\x2e\x9c\x7a\xdf\xb8\x1b\xc0\x94\x66\x32\x1a\xf9\xc7\x7c\x09\xac\xb5\x9a\xd6\x32\x99\xb3\x55\x38\x89\x65\x9c\x2f\x7d\xef\x6a\x72\x36\x3f\x7b\x77\x0d\x5b\x56\xc0\xba\x10\x12\x12\x46\x29\x26\x12\xd2\x58\xc6\x8b\x58\xe0\x67\xea\x05\xda\x8f\x5e\xba\x08\x9d\xae\x5a\x2b\x21\x95\xb2\x0f\x3c\xa3\x52\x2b\x9b\xce\x26\x17\xd7\xf0\xd3\x5d\xad\x45\x33\x8b\x22\x49\x10\x53\x4c\x3f\x53\xaf\x0f\xe9\x22\xd4\xe1\x05\x2e\x96\xb7\x28\xad\xc7\x67\x34\x1d\xb3\x3c\x37\x62\x7e\xe2\x8e\x0e\x42\xbf\x1d\x5f\xdf\x44\xdb\x48\x54\x01\x0b\x18\x0c\xa1\xf1\x34\x1c\xb3\xcd\xd6\x0f\x48\x2f\xd1\xf7\x22\x8c\x46\x7e\xed\x40\x38\x6e\x99\x08\x1a\x98\x45\x1f\x92\xe3\xce\xbd\xe5\x59\x3a\xb9\xf4\x37\x1c\x97\xd9\xc3\xa3\x4e\x19\xce\x47\x1d\x5a\x1e\x3a\xb4\xa3\x3f\x68\x3b\xb4\xd4\x0e\x11\x80\xb2\xe4\x31\x5d\x21\x9c\x7c\xe9\xc3\xc9\x7b\x96\x62\xae\xb5\x84\xd5\x49\x28\xa5\x19\x4e\xaa\xa2\x1b\x0c\x2d\x3d\xd4\xa5\xfe\x7d\xce\xde\xb1\x7b\xe4\x4a\x95\xe5\xc9\xec\x90\x6e\x24\xb3\x25\xb4\xd0\xb4\x2d\x92\x30\x2a\xa4\xed\x91\x86\x58\x96\xbb\xd2\x43\xf0\xdc\xd5\xbe\x0a\x8f\x04\xc4\xaa\xb7\x1c\xf3\xed\x06\x45\xa3\xdb\x05\xb5\x4b\xd5\x16\xad\xbb\x4a\xe9\xcb\xb2\x0c\x6b\x53\xa1\x52\x9e\xa6\x22\x4d\x95\xd2\x4d\xdb\x34\xf2\x8e\x88\x78\x1f\x6f\x60\x08\xeb\x78\x73\x65\xd2\x75\x6d\xfe\x95\x2d\x28\x0f\xad\x1e\xb7\x3c\xa8\x0d\xf7\x1b\xcb\x9a\xb3\xb2\x5f\x15\xcb\xf8\x4f\x4c\x6e\x77\x04\x7d\x3d\x4c\x76\xa6\xc0\x82\xb1\xdc\xce\x14\x9b\xde\x03\x87\xaf\x6a\xa1\x6b\x78\x35\x04\xcf\x23\x8a\x58\x7b\xbb\x30\x5e\xca\x58\x3e\x82\xa3\x23\xef\x84\x53\xdd\xfe\x20\x92\x46\xd3\x93\xa1\xdc\x31\xdc\x61\xfc\x47\xc1\x34\x3a\x7d\x21\x63\x59\x88\xa7\x80\xe9\x7c\xbe\x32\x32\x0e\xcb\xc6\x9e\x99\xf4\x4e\x62\x77\xe0\x4f\x23\x58\x08\x46\xc3\x8b\xc5\x57\x4c\xe4\x34\x85\x1b\xfd\x39\xf0\xbe\x64\x69\x9f\xad\x33\x89\xeb\x8d\xdc\x7a\xf0\xb5\xbe\xf4\x6e\xf6\x50\x98\x64\x98\xa7\x0d\xfc\x75\xa7\x94\x65\x55\x6a\x4a\xd5\x0a\x2d\xe9\xfb\x25\x8d\x6f\xf1\xb2\x0a\x4c\xa9\x43\x13\x47\xd9\x3c\xd3\xb4\x7f\xc4\x79\xa6\xab\xe3\x4e\xff\xaf\x58\xed\x8d\x67\x43\xbd\x69\x43\x3c\xe6\xa8\x97\xe9\x99\x04\x99\xad\x31\x9c\x67\x6b\xac\x7d\x49\x0c\xe9\x4b\x2c\x0f\x1d\x68\x68\xde\x4d\xa5\xe7\xd3\x26\xed\xd2\x53\x18\xd2\x51\x3d\x0d\xcd\xbb\x69\xaf\x4b\x97\x07\x3f\x80\x37\xee\x63\x27\xb9\xaf\x9b\x6b\xd5\xac\x42\x3b\xf2\x94\x6a\x89\xe9\xc5\x28\x90\x4b\x3f\x00\xe4\x9c\x71\x9b\x54\x3d\xda\xf5\xe8\xeb\x5a\x39\x9d\x03\x2e\x30\x6f\x04\x5c\x22\x07\x11\x8e\x73\x26\xd0\x0f\x6c\x66\x8f\x66\xdd\x24\xe6\x13\xcd\xbe\x15\x08\x16\xf8\x6c\xa9\x9d\xd1\xf6\x93\xf0\x9c\x8a\x82\xe3\x94\xa6\xf8\xe0\xeb\x85\x51\x9d\x4a\xd7\x31\xbf\xe1\x76\x00\x57\x75\x87\x75\x24\x5f\xf5\x1d\xbf\x31\x34\xa8\xce\x92\x17\xd8\x50\x22\xce\x36\x51\xb1\x11\x9a\xb6\x8c\x73\xd1\x22\x8d\xe2\xe4\x76\xc5\x59\x41\xd3\x41\x4b\x48\x05\xbf\x54\x6e\xbe\xaa\x9f\x0b\x35\xbb\x4d\x02\x72\x6e\xf8\x6c\x4d\xb9\x6e\xb2\x9d\x6e\x72\x11\x4e\x23\x18\x9a\x0e\x9a\xe1\x7d\xdd\x44\x0e\xb3\x9a\xab\xa9\xc5\xa1\xa9\xa2\x19\xbb\xf7\x83\xf0\xd3\x7c\xec\x07\xa4\x9d\xfa\x24\xb4\x09\x75\xb2\xcd\x03\xc2\x14\xa2\xcb\xfd\x68\x3b\x8d\xfc\x2c\xb5\x43\xa2\x0f\xc7\xeb\xe3\x19\xcb\x62\x2f\xc6\xa6\x4f\xfe\x36\x46\xc3\x3a\x4d\xfd\x9d\xd1\xf3\x2b\x3e\xf8\x59\x1a\xf4\x0d\x9c\xef\x9b\x8c\x78\x27\x02\xa5\x37\x68\x6c\xd5\x19\xec\x86\xe6\x12\x75\x24\x8c\xfb\xc2\x1e\x20\xa3\x12\xf9\x32\x4e\xb0\x54\xff\x43\xac\x5c\x1c\xff\x04\x9d\x49\x46\xd3\x8e\xb2\xd1\xcf\x3a\x47\xea\x1b\x04\x82\x7f\x03\x02\xad\x98\xe2\xbd\xdf\xc0\x4f\xea\xe1\x51\x05\x38\x15\x7b\x65\x61\x9d\xea\x35\x0b\xd0\x46\x0b\x49\xa8\x03\x9c\xa6\x9a\x2b\xbc\xa0\xd8\xee\x1d\xb3\x6b\xf7\x36\xe7\x81\xe0\xb1\x32\x3c\x50\xd5\x81\xe6\xef\x05\xf2\xad\xff\x4d\xff\x6d\xd7\xd8\xcb\x01\xf6\xf1\xe8\x8d\xe7\x8f\x06\x7b\x96\xe7\x4f\x8a\xf7\xea\xfa\xbf\x8b\x78\x1d\xdf\xe2\x9e\x03\x3f\x07\x4f\x8b\xfc\x2c\xcf\xfd\xd7\x47\x42\x3f\x7f\xc8\x84\xec\x6e\x1b\xfd\x26\x7b\x21\x0d\xe3\xb6\xed\x0f\x94\x73\xc7\xf2\xb3\xda\x86\x43\xd0\xdb\xfa\x9c\xf3\x19\x93\x13\xbd\x3a\x5b\x3c\x2d\x50\xcd\xa6\xd5\x3a\x1c\x55\xed\x2f\x52\xcb\xe3\xf6\xe9\x4e\x56\xaa\x7d\x5c\xc9\x77\xc1\xde\x5d\x6f\x2f\x35\x03\xc7\x5b\xea\xc5\x02\x1e\x61\x8e\x9d\xcf\x8a\xe7\x5f\x8a\x6e\xd1\x7d\xc4\x35\xbb\xeb\x7a\x14\x54\x6d\x59\x96\x98\x0b\x3d\xd1\x3a\x7e\xd0\x74\x3d\x52\x9f\xf5\xa7\x89\xfb\xcd\xe1\x7e\xbd\xba\x97\x62\x59\x86\x1f\xe3\x7b\xa5\xc8\x5f\x01\x00\x00\xff\xff\x8d\x23\x0e\xe8\xe2\x13\x00\x00")

func TemplateMgoTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplateMgoTmpl,
		"../template/mgo.tmpl",
	)
}

func TemplateMgoTmpl() (*asset, error) {
	bytes, err := TemplateMgoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../template/mgo.tmpl", size: 5090, mode: os.FileMode(420), modTime: time.Unix(1513448315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../template/interface.tmpl": TemplateInterfaceTmpl,
	"../template/mgo.tmpl": TemplateMgoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"interface.tmpl": &bintree{TemplateInterfaceTmpl, map[string]*bintree{}},
			"mgo.tmpl": &bintree{TemplateMgoTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

